#!/bin/sh

# Resource Impl: https://concourse-ci.org/implementing-resource-types.html#resource-in

set -o errexit
set -o nounset

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

dest=${1}

if [ -z "${dest}" ]; then
  echo "usage: $0 <path/to/volume>"
  exit 1
fi
#######################################

# parse incoming config data
payload=$(cat)

bucket="$(echo "${payload}" | jq -r '.source.bucket')"
if [ -z "${bucket}" ]; then
  echo "No bucket supplied"
  exit 1
fi

endpoint_url="$(echo "${payload}" | jq -r '.source.endpoint // ""')"
region="$(echo "${payload}" | jq -r '.source.region // "us-east-1"')"
use_v4="$(echo "${payload}" | jq -r '.source.use_v4 // ""')"
path="$(echo "${payload}" | jq -r '.source.path // ""')"
if [ "${path}" = '/' ]; then
  path=""
fi
suffix="$(echo "${payload}" | jq -r '.source.suffix // ""')"
encryption_key="$(echo "${payload}" | jq -r '.source.encryption_key // ""')"
skip_ssl_verification="$(echo "$payload" | jq -r '.source.skip_ssl_verification // ""')"
ca_bundle="$(echo "$payload" | jq -r '.source.ca_bundle // ""')"
minio_identifier="minio" # used to check if endpoint_url contains 'minio'

# export for `aws` cli
AWS_ACCESS_KEY_ID=$(echo "$payload" | jq -r '.source.access_key_id')
if [ -z "${AWS_ACCESS_KEY_ID}" ] || [ "${AWS_ACCESS_KEY_ID}" = "null" ]; then
  if [ "${endpoint_url#*$minio_identifier}" != "${endpoint_url}" ]; then # if no creds are supplied and endpoint is for minio, exit
    echo "No access_key_id supplied, needed if accessing minio."
    exit 1
  fi
fi
AWS_SECRET_ACCESS_KEY=$(echo "$payload" | jq -r '.source.secret_access_key')
if [ -z "${AWS_SECRET_ACCESS_KEY}" ] || [ "${AWS_SECRET_ACCESS_KEY}" = "null" ]; then
  if [ "${endpoint_url#*$minio_identifier}" != "${endpoint_url}" ]; then
    echo "No secret_access_key supplied, needed if accessing minio."
    exit 1
  fi
fi

# Due to precedence rules, must be unset to support AWS IAM Roles.
if [ -n "${AWS_ACCESS_KEY_ID}" ] && [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then
  export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
  export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
fi

endpoint_opt=""
if [ -n "${endpoint_url}" ]; then
  endpoint_opt="--endpoint-url=${endpoint_url}"
fi

export AWS_DEFAULT_REGION="${region}"
if [ "${use_v4}" = "true" ];then
  aws configure set default.s3.signature_version s3v4
fi

ssl_verification_opt=""
if [ "${skip_ssl_verification}" = "true" ]; then
  ssl_verification_opt="--no-verify-ssl"
  export PYTHONWARNINGS="ignore:Unverified HTTPS request"
fi

if [ -n "${ca_bundle}" ]; then
  echo "${ca_bundle}" > /tmp/ca.pem
  export AWS_CA_BUNDLE=/tmp/ca.pem
fi

with_enc=""
[ -z "${encryption_key}" ] || with_enc=".gpg"
options="--exclude='*' --include='*${suffix}${with_enc}'"

echo "Checking path in S3..."
aws s3 ls "s3://${bucket}/${path}" --endpoint "${endpoint_url}" --no-verify-ssl > /dev/null || echo "Path check exited with code [$?], check path provided exists" && exit 1

echo "Downloading from S3..."
# We don't want options encapsulated in quotes as they are space-separated switches
# shellcheck disable=SC2086
eval aws "${ssl_verification_opt}" s3 sync "s3://${bucket}/${path} ${dest} ${endpoint_opt} ${options}"
echo "...done."

if [ ! "${encryption_key}" = "" ];then
  echo "Decrypting with GnuPG..."
  # shellcheck disable=SC2086
  find "${dest}" -type f -name "*${suffix}.gpg" \
  -exec echo "{}" \; \
  -exec /opt/resource/decrypt.sh {} "${encryption_key}" \; \
  -exec rm {} \;
  echo "...done."
fi

version=$(echo "${payload}" | jq -re '.version')

jq -n "{
  version: ${version}
}" >&3
